<template>
  <FullScreen v-model="isFullScreen">
    <ACard :bordered="false">
      <div class="filters">
        <ARow :gutter="8">
          <ACol flex="1">
<%_ if (functions.queryMore) { _%>
            <ASpace class="filters-input" :class="{ 'filters-input-active': <%- schema.extra.name %>QueryMoreVisible }" wrap>
<%_ } else { _%>
            <ASpace class="filters-input filters-input-active" wrap>
<%_ } _%>
              <AInput placeholder="输入任意查询条件"
                      style="width: 200px;"
                      v-model="<%- schema.extra.name %>Query.keywords"
                      allowClear />
<%_
  schema.properties
    .filter(({ extra }) => extra.filter === true)
    .forEach(({ name, description, type, format, extra }) => {
_%>
  <%_ if (extra.filterRender === 'number' || (!extra.filterRender && type === 'number')) { _%>
              <AInputNumber placeholder="<%- description %>"
                            v-model="<%- schema.extra.name %>Query.<%- name %>"
                            :precision="<%- format === 'bigdecimal' ? 2 : 0 %>"
                            :formatter="numberFormatter"
                            :parser="numberParser"
                            allowClear />
  <%_ } else if (extra.filterRender === 'boolean' || (!extra.filterRender && type === 'boolean')) { _%>
              <ARadioGroup v-model="<%- schema.extra.name %>Query.<%- name %>" type="button">
                <ARadio value="">全部</ARadio>
                <ARadio :value="true"><%- description %>是</ARadio>
                <ARadio :value="false"><%- description %>否</ARadio>
              </ARadioGroup>
  <%_ } else if (/^date(time)?$/.test(extra.filterRender) || (!extra.filterRender && /^(date(-time)?)$/.test(format))) { _%>
              <ARangePicker :placeholder="['<%- description %>起', '<%- description %>止']"
                            style="width: <%- 264 + Math.max(0, description.length - 5) * 14 * 2 %>px"
                            v-model="<%- schema.extra.name %>Query.<%- name %>"
                            allowClear />
  <%_ } else if (/^select(Multiple(Create)?)?$/.test(extra.filterRender) || (!extra.filterRender && (extra.options || extra.optionsFromDict || extra.optionsFromEntity))) { _%>
              <ASelect placeholder="<%- description %>"
    <%_ if (extra.filterRender === 'select' || (!extra.filterRender && (extra.options || extra.optionsFromDict || extra.optionsFromEntity))) { _%>
                       class="query-<%- description.length %>-words"
    <%_ } _%>
                       :triggerProps="{ autoFitPopupMinWidth: true }"
    <%_ if (extra.options) { _%>
                       :options="<%- JSON.stringify(extra.options, undefined, '  ').replace(/\n\]$/, ',\n]').replace(/(?<=\n)/g, ' '.repeat(23)).replace(/'/g, '\\\'').replace(/(?<!\\)"/g, '\'') %>"
    <%_ } else if (extra.optionsFromDict) { _%>
                       :loading="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading"
                       :options="dictItemRequest.record.<%- extra.optionsFromDict %>?.data"
    <%_ } else if (extra.optionsFromEntity) { _%>
                       :loading="<%- extra.optionsFromEntity.name %>Request.loading"
                       :options="<%- extra.optionsFromEntity.name %>Request.data"
                       :fieldNames="{ label: '<%- extra.optionsFromEntity.field %>', value: '<%- extra.optionsFromEntity.field %>' }"
    <%_ } _%>
    <%_ if (/^selectMultiple(Create)?$/.test(extra.filterRender)) { _%>
                       v-model="<%- schema.extra.name %>Query.<%- extra.names %>"
                       multiple
    <%_ } else { _%>
                       v-model="<%- schema.extra.name %>Query.<%- name %>"
    <%_ } _%>
                       allowClear
    <%_ if (extra.filterRender === 'selectMultipleCreate') { _%>
                       allowCreate
    <%_ } _%>
    <%_ if (extra.optionsFromEntity) { _%>
                       allowSearch
                       :filterOption="false"
                       @focus="<%- extra.optionsFromEntity.name %>Request.load()"
                       @search="<%- extra.optionsFromEntity.name %>Request.load" />
    <%_ } else { _%>
                       allowSearch />
    <%_ } _%>
  <%_ } else if (extra.filterRender === 'autoComplete') { _%>
              <AAutoComplete placeholder="<%- description %>"
                             :triggerProps="{ autoFitPopupMinWidth: true }"
    <%_ if (extra.options) { _%>
                             :data="<%- JSON.stringify(extra.options, undefined, '  ').replace(/\n\]$/, ',\n]').replace(/(?<=\n)/g, ' '.repeat(29)).replace(/'/g, '\\\'').replace(/(?<!\\)"/g, '\'') %>"
    <%_ } else if (extra.optionsFromDict) { _%>
                             :loading="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading"
                             :data="dictItemRequest.record.<%- extra.optionsFromDict %>?.data"
    <%_ } else if (extra.optionsFromEntity) { _%>
                             :loading="<%- extra.optionsFromEntity.name %>Request.loading"
                             :data="<%- extra.optionsFromEntity.name %>Request.data"
                             :fieldNames="{ label: '<%- extra.optionsFromEntity.field %>', value: '<%- extra.optionsFromEntity.field %>' }"
    <%_ } _%>
                             v-model="<%- schema.extra.name %>Query.<%- name %>"
    <%_ if (extra.optionsFromEntity) { _%>
                             allowClear
                             :filterOption="false"
                             @search="<%- extra.optionsFromEntity.name %>Request.load" />
    <%_ } else { _%>
                             allowClear />
    <%_ } _%>
  <%_ } else if (extra.filterRender === 'radio') { _%>
              <ARadioGroup type="button" v-model="<%- schema.extra.name %>Query.<%- name %>">
                <ARadio value="">全部</ARadio>
    <%_ if (extra.options) { _%>
      <%_ extra.options.forEach(option => { _%>
                <ARadio value="<%- option %>"><%- option %></ARadio>
      <%_ }) _%>
    <%_ } else if (extra.optionsFromDict) { _%>
                <ASpin v-if="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading" :size="16" />
                <template v-else>
                  <ARadio v-for="{ label, value } in dictItemRequest.record.<%- extra.optionsFromDict %>?.data" :key="label" :value="value">{{ label }}</ARadio>
                </template>
    <%_ } else if (extra.optionsFromEntity) { _%>
                <ASpin v-if="<%- extra.optionsFromEntity.name %>Request.loading" :size="16" />
                <template v-else>
                  <ARadio v-for="{ <%- extra.optionsFromEntity.field %> } in <%- extra.optionsFromEntity.name %>Request.data" :key="<%- extra.optionsFromEntity.field %>" :value="<%- extra.optionsFromEntity.field %>">{{ <%- extra.optionsFromEntity.field %> }}</ARadio>
                </template>
    <%_ } _%>
              </ARadioGroup>
  <%_ } else if (extra.filterRender === 'inputTag') { _%>
              <AInputTag placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- extra.names %>" allowClear />
  <%_ } else if (extra.filterRender === 'checkbox') { _%>
              <ACheckboxGroup v-model="<%- schema.extra.name %>Query.<%- extra.names %>">
    <%_ if (extra.options) { _%>
      <%_ extra.options.forEach(option => { _%>
                <ACheckbox value="<%- option %>"><%- option %></ACheckbox>
      <%_ }) _%>
    <%_ } else if (extra.optionsFromDict) { _%>
                <ASpin v-if="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading" :size="16" />
                <template v-else>
                  <ACheckbox v-for="{ label, value } in dictItemRequest.record.<%- extra.optionsFromDict %>?.data" :key="label" :value="value">{{ label }}</ACheckbox>
                </template>
    <%_ } else if (extra.optionsFromEntity) { _%>
                <ASpin v-if="<%- extra.optionsFromEntity.name %>Request.loading" :size="16" />
                <template v-else>
                  <ACheckbox v-for="{ <%- extra.optionsFromEntity.field %> } in <%- extra.optionsFromEntity.name %>Request.data" :key="<%- extra.optionsFromEntity.field %>" :value="<%- extra.optionsFromEntity.field %>">{{ <%- extra.optionsFromEntity.field %> }}</ACheckbox>
                </template>
    <%_ } _%>
              </ACheckboxGroup>
  <%_ } else if (extra.filterRender === 'textarea') { _%>
              <ATextarea placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- name %>" allowClear />
  <%_ } else if (type === 'string') { _%>
              <AInput placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- name %>" allowClear />
  <%_ } else { _%>
              <ASelect placeholder="<%- description %>"
                       :triggerProps="{ autoFitPopupMinWidth: true }"
                       v-model="<%- schema.extra.name %>Query.<%- name %>"
    <%_ if (type.endsWith('[]')) { _%>
                       multiple
    <%_ } _%>
                       allowClear
                       allowSearch />
  <%_ } _%>
<%_ }) _%>
<%_ if (schema.properties.some(({ extra }) => extra.filter === 'inMore')) { _%>
              <template v-if="<%- schema.extra.name %>QueryMoreVisible">
  <%_
    schema.properties
      .filter(({ extra }) => extra.filter === 'inMore')
      .forEach(({ name, description, type, format, extra }) => {
  _%>
    <%_ if (extra.filterRender === 'number' || (!extra.filterRender && type === 'number')) { _%>
                <AInputNumber placeholder="<%- description %>"
                              v-model="<%- schema.extra.name %>Query.<%- name %>"
                              :precision="<%- format === 'bigdecimal' ? 2 : 0 %>"
                              :formatter="numberFormatter"
                              :parser="numberParser"
                              allowClear />
    <%_ } else if (extra.filterRender === 'boolean' || (!extra.filterRender && type === 'boolean')) { _%>
                <ARadioGroup v-model="<%- schema.extra.name %>Query.<%- name %>" type="button">
                  <ARadio value="">全部</ARadio>
                  <ARadio :value="true"><%- description %>是</ARadio>
                  <ARadio :value="false"><%- description %>否</ARadio>
                </ARadioGroup>
    <%_ } else if (/^date(time)?$/.test(extra.filterRender) || (!extra.filterRender && /^(date(-time)?)$/.test(format))) { _%>
                <ARangePicker :placeholder="['<%- description %>起', '<%- description %>止']"
                              style="width: <%- 264 + Math.max(0, description.length - 5) * 14 * 2 %>px;"
                              v-model="<%- schema.extra.name %>Query.<%- name %>"
                              allowClear />
    <%_ } else if (/^select(Multiple(Create)?)?$/.test(extra.filterRender) || (!extra.filterRender && (extra.options || extra.optionsFromDict || extra.optionsFromEntity))) { _%>
                <ASelect placeholder="<%- description %>"
      <%_ if (extra.filterRender === 'select' || (!extra.filterRender && (extra.options || extra.optionsFromDict || extra.optionsFromEntity))) { _%>
                         class="query-<%- description.length %>-words"
      <%_ } _%>
                         :triggerProps="{ autoFitPopupMinWidth: true }"
      <%_ if (extra.options) { _%>
                         :options="<%- JSON.stringify(extra.options, undefined, '  ').replace(/\n\]$/, ',\n]').replace(/(?<=\n)/g, ' '.repeat(25)).replace(/'/g, '\\\'').replace(/(?<!\\)"/g, '\'') %>"
      <%_ } else if (extra.optionsFromDict) { _%>
                         :loading="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading"
                         :options="dictItemRequest.record.<%- extra.optionsFromDict %>?.data"
      <%_ } else if (extra.optionsFromEntity) { _%>
                         :loading="<%- extra.optionsFromEntity.name %>Request.loading"
                         :options="<%- extra.optionsFromEntity.name %>Request.data"
                         :fieldNames="{ label: '<%- extra.optionsFromEntity.field %>', value: '<%- extra.optionsFromEntity.field %>' }"
      <%_ } _%>
      <%_ if (/^selectMultiple(Create)?$/.test(extra.filterRender)) { _%>
                         v-model="<%- schema.extra.name %>Query.<%- extra.names %>"
                         multiple
      <%_ } else { _%>
                         v-model="<%- schema.extra.name %>Query.<%- name %>"
      <%_ } _%>
                         allowClear
      <%_ if (extra.filterRender === 'selectMultipleCreate') { _%>
                         allowCreate
      <%_ } _%>
      <%_ if (extra.optionsFromEntity) { _%>
                         allowSearch
                         :filterOption="false"
                         @focus="<%- extra.optionsFromEntity.name %>Request.load()"
                         @search="<%- extra.optionsFromEntity.name %>Request.load" />
      <%_ } else { _%>
                         allowSearch />
      <%_ } _%>
    <%_ } else if (extra.filterRender === 'autoComplete') { _%>
                <AAutoComplete placeholder="<%- description %>"
                               :triggerProps="{ autoFitPopupMinWidth: true }"
      <%_ if (extra.options) { _%>
                               :data="<%- JSON.stringify(extra.options, undefined, '  ').replace(/\n\]$/, ',\n]').replace(/(?<=\n)/g, ' '.repeat(31)).replace(/'/g, '\\\'').replace(/(?<!\\)"/g, '\'') %>"
      <%_ } else if (extra.optionsFromDict) { _%>
                               :loading="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading"
                               :data="dictItemRequest.record.<%- extra.optionsFromDict %>?.data"
      <%_ } else if (extra.optionsFromEntity) { _%>
                               :loading="<%- extra.optionsFromEntity.name %>Request.loading"
                               :data="<%- extra.optionsFromEntity.name %>Request.data"
                               :fieldNames="{ label: '<%- extra.optionsFromEntity.field %>', value: '<%- extra.optionsFromEntity.field %>' }"
      <%_ } _%>
                               v-model="<%- schema.extra.name %>Query.<%- name %>"
      <%_ if (extra.optionsFromEntity) { _%>
                               allowClear
                               :filterOption="false"
                               @search="<%- extra.optionsFromEntity.name %>Request.load" />
      <%_ } else { _%>
                               allowClear />
      <%_ } _%>
    <%_ } else if (extra.filterRender === 'radio') { _%>
                <ARadioGroup type="button" v-model="<%- schema.extra.name %>Query.<%- name %>">
                  <ARadio value="">全部</ARadio>
      <%_ if (extra.options) { _%>
        <%_ extra.options.forEach(option => { _%>
                  <ARadio value="<%- option %>"><%- option %></ARadio>
        <%_ }) _%>
      <%_ } else if (extra.optionsFromDict) { _%>
                  <ASpin v-if="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading" :size="16" />
                  <template v-else>
                    <ARadio v-for="{ label, value } in dictItemRequest.record.<%- extra.optionsFromDict %>?.data" :key="label" :value="value">{{ label }}</ARadio>
                  </template>
      <%_ } else if (extra.optionsFromEntity) { _%>
                  <ASpin v-if="<%- extra.optionsFromEntity.name %>Request.loading" :size="16" />
                  <template v-else>
                    <ARadio v-for="{ <%- extra.optionsFromEntity.field %> } in <%- extra.optionsFromEntity.name %>Request.data" :key="<%- extra.optionsFromEntity.field %>" :value="<%- extra.optionsFromEntity.field %>">{{ <%- extra.optionsFromEntity.field %> }}</ARadio>
                  </template>
      <%_ } _%>
                </ARadioGroup>
    <%_ } else if (extra.filterRender === 'inputTag') { _%>
                <AInputTag placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- extra.names %>" allowClear />
    <%_ } else if (extra.filterRender === 'checkbox') { _%>
                <ACheckboxGroup v-model="<%- schema.extra.name %>Query.<%- extra.names %>">
      <%_ if (extra.options) { _%>
        <%_ extra.options.forEach(option => { _%>
                  <ACheckbox value="<%- option %>"><%- option %></ACheckbox>
        <%_ }) _%>
      <%_ } else if (extra.optionsFromDict) { _%>
                  <ASpin v-if="dictItemRequest.record.<%- extra.optionsFromDict %>?.loading" :size="16" />
                  <template v-else>
                    <ACheckbox v-for="{ label, value } in dictItemRequest.record.<%- extra.optionsFromDict %>?.data" :key="label" :value="value">{{ label }}</ACheckbox>
                  </template>
      <%_ } else if (extra.optionsFromEntity) { _%>
                  <ASpin v-if="<%- extra.optionsFromEntity.name %>Request.loading" :size="16" />
                  <template v-else>
                    <ACheckbox v-for="{ <%- extra.optionsFromEntity.field %> } in <%- extra.optionsFromEntity.name %>Request.data" :key="<%- extra.optionsFromEntity.field %>" :value="<%- extra.optionsFromEntity.field %>">{{ <%- extra.optionsFromEntity.field %> }}</ACheckbox>
                  </template>
      <%_ } _%>
                </ACheckboxGroup>
    <%_ } else if (extra.filterRender === 'textarea') { _%>
                <ATextarea placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- name %>" allowClear />
    <%_ } else if (type === 'string') { _%>
                <AInput placeholder="<%- description %>" v-model="<%- schema.extra.name %>Query.<%- name %>" allowClear />
    <%_ } else { _%>
                <ASelect placeholder="<%- description %>"
                         :triggerProps="{ autoFitPopupMinWidth: true }"
                         v-model="<%- schema.extra.name %>Query.<%- name %>"
      <%_ if (type.endsWith('[]')) { _%>
                         multiple
      <%_ } _%>
                         allowClear
                         allowSearch />
    <%_ } _%>
  <%_ }) _%>
              </template>
<%_ } _%>
            </ASpace>
          </ACol>

          <ACol flex="initial">
            <ASpace size="mini" wrap>
              <AButton style="padding: 0 4px;" type="text" @click="reset<%- schema.extra.Name %>QueryHandle">
                重置
              </AButton>
<%_ if (schema.properties.some(({ extra }) => extra.filter === 'inMore')) { _%>
              <AButton style="padding: 0 4px;" type="text" @click="toggle<%- schema.extra.Name %>QueryMoreVisibleHandle">
                更多
                <IconUpCircle v-if="<%- schema.extra.name %>QueryMoreVisible" />
                <IconDownCircle v-else />
              </AButton>
<%_ } _%>
            </ASpace>
          </ACol>
        </ARow>
      </div>

      <div class="actions">
        <ARow :gutter="8">
          <ACol flex="1">
            <ASpace :size="0" wrap>
              <template #split>
                <ADivider direction="vertical" :margin="4" />
              </template>
<%_ if (functions.create) { _%>
              <AButton style="padding: 0 4px;" type="text" @click="showCreate<%- schema.extra.Name %>Handle">
                <template #icon>
                  <IconPlus />
                </template>新增
              </AButton>
<%_ } _%>
<%_ if (functions.batchCreate) { _%>
              <AButton style="padding: 0 4px;" type="text" @click="showBatchCreate<%- schema.extra.Name %>Handle">
                <template #icon>
                  <IconPlus />
                </template>批量新增
              </AButton>
<%_ } _%>
<%_ if (functions.batchCopy) { _%>
              <AButton style="padding: 0 4px;"
                       type="text"
                       :title="batchCopy<%- schema.extra.Name %>Hint"
                       :disabled="batchCopy<%- schema.extra.Name %>Disabled"
                       @click="showBatchCopy<%- schema.extra.Name %>Handle">
                <template #icon>
                  <IconCopy />
                </template>批量复制
              </AButton>
<%_ } _%>
<%_ if (functions.batchUpdate) { _%>
              <AButton style="padding: 0 4px;"
                       type="text"
                       :title="batchUpdate<%- schema.extra.Name %>Hint"
                       :disabled="batchUpdate<%- schema.extra.Name %>Disabled"
                       @click="showBatchUpdate<%- schema.extra.Name %>Handle">
                <template #icon>
                  <IconEdit />
                </template>批量编辑
              </AButton>
<%_ } _%>
<%_ if (functions.batchDelete) { _%>
              <AButton style="padding: 0 4px;"
                       type="text"
                       :title="batchDelete<%- schema.extra.Name %>Hint"
                       :disabled="batchDelete<%- schema.extra.Name %>Disabled"
                       @click="showBatchDelete<%- schema.extra.Name %>Handle">
                <template #icon>
                  <IconDelete />
                </template>批量删除
              </AButton>
<%_ } _%>
            </ASpace>
          </ACol>

          <ACol flex="initial">
            <ASpace wrap>
              <AButton @click="<%- schema.extra.name %>Request.load">
                <template #icon>
                  <IconRefresh />
                </template>
              </AButton>
              <AButton @click="toggleFullScreenHandle">
                <template #icon>
                  <IconFullscreenExit v-if="isFullScreen" />
                  <IconFullscreen v-else />
                </template>
              </AButton>
              <AButton @click="<%- schema.extra.name %>Columns.showSetting">
                <template #icon>
                  <IconSettings />
                </template>
              </AButton>
            </ASpace>
          </ACol>
        </ARow>
      </div>

      <div class="table">
        <ATable tableLayoutFixed
                size="small"
                :bordered="false"
                :scroll="{ x: '100%', y: '100%' }"
                :columns="<%- schema.extra.name %>Columns.value"
                columnResizable
                @columnResize="<%- schema.extra.name %>Columns.resize"
                :loading="<%- schema.extra.name %>Request.loading"
                :data="<%- schema.extra.name %>Request.data"
                rowKey="id"
                :pagination="{
                  total: <%- schema.extra.name %>Request.total,
                  showTotal: true,
                  current: <%- schema.extra.name %>Request.current,
                  pageSize: <%- schema.extra.name %>Request.pageSize,
                  showPageSize: true,
                  pageSizeOptions: [20, 50, 100, 200],
                }"
                @pageChange="<%- schema.extra.name %>Request.setCurrent"
                @pageSizeChange="<%- schema.extra.name %>Request.setPageSize"
                :rowSelection="{
                  type: 'checkbox',
                  showCheckedAll: true,
                  width: 40,
                  fixed: true,
                }"
<%_ if (functions.sort) { _%>
                v-model:selectedKeys="<%- schema.extra.name %>SelectedKeys"
                @sorterChange="sort<%- schema.extra.Name %>Handle">
<%_ } else { _%>
                v-model:selectedKeys="<%- schema.extra.name %>SelectedKeys">
<%_ } _%>
<%_ if (functions.detail) { _%>
          <!-- 数值明细入口模板 -->
          <template #detailEntry="{ record }">
  <%_ if (functions.detail.type === 'navigate') { _%>
            <ALink @click="$router.push({ name: '<%- functions.detail.route %>', params: { id: record.id } })">
              {{ record.<%- entity.titleField %> }}
            </ALink>
  <%_ } else if (functions.detail.type === 'view') { _%>
            <ALink @click="view<%- schema.extra.Name %>Handle(record.$raw)">
              {{ record.<%- entity.titleField %> }}
            </ALink>
  <%_ } _%>
          </template>
<%_ } _%>
<%_
  if (
    schema.properties
      .filter(({ name }) => !/^(id|entityUuid|.+Id)$/.test(name))
      .some(({ type, format }) => type === 'number' && format !== 'bigdecimal')
  ) {
_%>
          <!-- 数值模板 -->
          <template #number="{ record, column }">
            <NumberView :value="get(record, column.dataIndex)" />
          </template>
<%_ } _%>
<%_
  if (
    schema.properties
      .filter(({ name }) => !/^(id|entityUuid|.+Id)$/.test(name))
      .some(({ type, format }) => type === 'number' && format === 'bigdecimal')
  ) {
_%>
          <!-- 数值模板（2位小数） -->
          <template #decimal2="{ record, column }">
            <NumberView :value="get(record, column.dataIndex)" format="1.2" />
          </template>
<%_ } _%>
<%_
  if (
    schema.properties
      .filter(({ name }) => !/^(id|entityUuid|.+Id)$/.test(name))
      .some(({ type }) => type === 'boolean')
  ) {
_%>
          <!-- 布尔值模板 -->
          <template #boolean="{ record, column }">
            <BooleanView :value="get(record, column.dataIndex)" />
          </template>
<%_ } _%>
<%_ if (functions.copy || functions.update || functions.delete) { _%>
          <!-- 列操作区模板 -->
          <template #actions="{ record }">
            <ASpace :size="0">
              <template #split>
                <ADivider direction="vertical" :margin="4" />
              </template>
  <%_ if (functions.copy) { _%>
              <ALink @click="showCopy<%- schema.extra.Name %>Handle(record.$raw)">复制</ALink>
  <%_ } _%>
  <%_ if (functions.update) { _%>
              <ALink @click="showUpdate<%- schema.extra.Name %>Handle(record.$raw)">编辑</ALink>
  <%_ } _%>
  <%_ if (functions.delete) { _%>
              <ALink @click="showDelete<%- schema.extra.Name %>Handle(record.$raw)">删除</ALink>
  <%_ } _%>
            </ASpace>
          </template>
<%_ } _%>
        </ATable>
      </div>
    </ACard>
  </FullScreen>
</template>

<script lang="tsx" setup>
<%_ Object.entries(imports).forEach(([name, { default: _default, values, types }]) => { _%>
  <%_ if (_default || values.size) { _%>
import <% if (_default) { %><%- _default %><% } %><% if (_default && (values.size || types.size)) { %>, <% } %><% if (values.size || types.size) { %>{ <% } %><%- Array.from(values).concat(Array.from(types).map(type => `type ${type}`)).join(', ') %><% if (values.size || types.size) { %> }<% } %> from '<%- name %>';
  <%_ } else if (types.size) { _%>
import type { <%- Array.from(types).join(', ') %> } from '<%- name %>';
  <%_ } _%>
<%_ }) _%>
<%_
  if (
    (functions.create || functions.copy || functions.batchCreate || functions.batchCopy) &&
    schema.properties.some(({ name }) => name === 'tenantId')
  ) {
_%>

const passport = usePassport();
<%_ } _%>

// 全屏
const isFullScreen = ref(false);
const toggleFullScreenHandle = () => {
  isFullScreen.value = !isFullScreen.value;
};
<%_ if (entity.dictCodes.length > 0) { _%>

// 获取字典
const dictItemRequest = useRequestRecord(
  async (dictCode: string) => {
    const { data } = await getAllDictItems({ dictCode });
    return data.sort((a, b) => a.sequence - b.sequence);
  },
  {
    recordKey: dictCode => dictCode,
    onError: error => Message.error(getErrorMessage(error)),
  },
);
<%_ } _%>
<%_ entity.dictCodes.forEach(dictCode => { _%>
dictItemRequest.load('<%- dictCode %>');
<%_ }) _%>
<%_ entity.entities.forEach(({ Names, name, description }) => { _%>

// 获取<%- description %>
const <%- name %>Request = useRequest(
  async (keywords?: string) => {
    const { data } = await getAll<%- Names %>({ keywords });
    return data.map(item => {
      return {
        $raw: item,
        ...cloneDeep(item),
      };
    });
  },
  {
    manual: true,
    onError: error => Message.error(getErrorMessage(error)),
  },
);
<%_ }) _%>

// <%- schema.description %>请求参数
const <%- schema.extra.name %>InitialQuery = {
  /** 关键词 */
  keywords: undefined as string | undefined,
<%_
  schema.properties
    .filter(({ extra }) => extra.filter === true || extra.filter === 'inMore')
    .forEach(({ name, description, type, format, extra }) => {
_%>
  /** <%- description %> */
  <%_ if (/^date(time)?$/.test(extra.filterRender) || (!extra.filterRender && /^(date(-time)?)$/.test(format))) { _%>
  <%- name %>: undefined as string[] | undefined,
  <%_ } else if (/^checkbox|inputTag|(selectMultiple(Create)?)$/.test(extra.filterRender) && !type.endsWith('[]')) { _%>
  <%- extra.names %>: undefined as <%- type %>[] | undefined,
  <%_ } else if (type === 'string') { _%>
  <%- name %>: undefined as string | undefined,
  <%_ } else if (type === 'boolean') { _%>
  <%- name %>: '' as boolean | '',
  <%_ } else { _%>
  <%- name %>: undefined as <%- type %> | undefined,
  <%_ } _%>
<%_ }) _%>
};
const <%- schema.extra.name %>Query = reactive(cloneDeep(<%- schema.extra.name %>InitialQuery));
const <%- schema.extra.name %>Sort = ref(['id,desc']);

// 重置<%- schema.description %>筛选
const reset<%- schema.extra.Name %>QueryHandle = () => {
  Object.entries(cloneDeep(<%- schema.extra.name %>InitialQuery)).forEach(([key, value]) => {
    // @ts-ignore
    <%- schema.extra.name %>Query[key] = value;
  });
};
<%_ if (functions.queryMore) { _%>

// 更多<%- schema.description %>筛选
const <%- schema.extra.name %>QueryMoreVisible = ref(false);
const toggle<%- schema.extra.Name %>QueryMoreVisibleHandle = () => {
  <%- schema.extra.name %>QueryMoreVisible.value = !<%- schema.extra.name %>QueryMoreVisible.value;
};
<%_ } _%>

// 获取<%- schema.description %>
const <%- schema.extra.name %>Request = useRequestPagination(
  async ({ current, pageSize }) => {
    const query = {
      ...<%- schema.extra.name %>Query as any,
<%_
  schema.properties
    .filter(({ extra }) => extra.filter === true || extra.filter === 'inMore')
    .forEach(({ name, format, extra }) => {
_%>
  <%_ if (extra.filterRender === 'datetime' || (!extra.filterRender && format === 'date-time')) { _%>
      <%- name %>: undefined,
      <%- name %>From: <%- schema.extra.name %>Query.<%- name %> && `${<%- schema.extra.name %>Query.<%- name %>[0]} 00:00:00.000`,
      <%- name %>To: <%- schema.extra.name %>Query.<%- name %> && `${<%- schema.extra.name %>Query.<%- name %>[1]} 23:59:59.999`,
  <%_ } _%>
<%_ }) _%>
<%_
  schema.properties
    .filter(({ extra }) => extra.filter === true || extra.filter === 'inMore')
    .forEach(({ name, format, extra }) => {
_%>
  <%_ if (extra.filterRender === 'date' || (!extra.filterRender && format === 'date')) { _%>
      <%- name %>: undefined,
      <%- name %>From: <%- schema.extra.name %>Query.<%- name %>?.[0],
      <%- name %>To: <%- schema.extra.name %>Query.<%- name %>?.[1],
  <%_ } _%>
<%_ }) _%>
      page: current - 1,
      size: pageSize,
      sort: <%- schema.extra.name %>Sort.value,
    };
    const { headers, data } = await getAll<%- schema.extra.Names %>(query);
    return {
      data: data.map(item => {
        return {
          $raw: item,
          ...cloneDeep(item),
        };
      }),
      total: Number(headers.xTotalCount),
    };
  },
  {
    onError: error => Message.error(getErrorMessage(error)),
  },
);
watch(
  [
    () => ({ ...<%- schema.extra.name %>Query }),
    <%- schema.extra.name %>Sort,
  ],
  debounce(() => <%- schema.extra.name %>Request.setCurrent(1, true), 500),
);

// <%- schema.description %>列
const <%- schema.extra.name %>Columns = useTableColumns({
  persistenceKey: '<%- schema.extra.Name %>',
  initialValue: [
<%_
  schema.properties
    .filter(({ name }) => !/^(id|entityUuid|.+Id)$/.test(name))
    .forEach(({ name, description, type, format, extra }) => {
_%>
    { title: '<%- description %>', dataIndex: '<%- name %>'<% if ((functions.detail) && name === entity.titleField) { %>, slotName: 'detailEntry'<% } else if (type === 'number') { %>, slotName: '<%- format === 'bigdecimal' ? 'decimal2' : 'number' %>'<% } else if (type === 'boolean') { %>, slotName: 'boolean'<% } %><% if (typeof extra.visible === 'boolean') { %>, visible: <%- extra.visible %><% } else if (extra.visible === 'always') { %>, visible: 'always'<% } %>, width: <%- typeof extra.width === 'number' ? extra.width : format === 'date-time' ? 180 : 200 %><% if (type === 'number') { %>, align: 'right'<% } %>, ellipsis: true, tooltip: true<% if (extra.sortable === true) { %>, sortable: { sortDirections: ['ascend', 'descend'], sorter: true }<% } %> },
<%_ }) _%>
<%_ if (functions.copy || functions.update || functions.delete) { _%>
    { title: '操作', dataIndex: 'actions', slotName: 'actions', visible: 'always', width: <%- [functions.copy, functions.update, functions.delete].filter(item => item).length * (4 + 28 + 4 + 10) - 10 + 16 * 2 + 4 %>, fixed: 'right' },
<%_ } _%>
  ],
});
<%_ if (functions.sort) { _%>

// 排序<%- schema.description %>
const sort<%- schema.extra.Name %>Handle = (dataIndex: string, direction: string) => {
  <%- schema.extra.name %>Sort.value = direction
    ? [`${dataIndex},${direction.slice(0, -3)}`].concat(<%- schema.extra.name %>Sort.value.slice(-1))
    : <%- schema.extra.name %>Sort.value.slice(-1);
};
<%_ } _%>
<%_ if (functions.detail && functions.detail.type === 'view') { _%>

// 查看<%- schema.description %>
const view<%- schema.extra.Name %>Handle = (<%- schema.extra.name %>: OptimizeModel<<%- schema.name %>>) => {
  Drawer.open({
    title: `${<%- schema.extra.name %>.<%- entity.titleField %>}`,
    content: () => (
      <<%- functions.detail.component %> raw={<%- schema.extra.name %>} />
    ),
    footer: false,
    width: 450,
  });
};
<%_ } _%>
<%_ if (functions.create) { _%>

// 新增<%- schema.description %>
const showCreate<%- schema.extra.Name %>Handle = () => {
  const formRef = ref<InstanceType<typeof <%- functions.create.component %>>>();
  Modal.open({
    title: '新增<%- schema.description %>',
    content: () => (
      <<%- functions.create.component %> ref={instance => formRef.value = instance as any} />
    ),
    width: <%-
      Math.min(
        4,
        Math.ceil(
          schema.properties
            .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
            .length / 5
        )
      ) * (278 + 16) - 16 + 20 * 2
%>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatch = await formRef.value!.validate();
        try {
          const modelValue = {
            ...modelPatch,
  <%_ if (schema.properties.some(({ name }) => name === 'tenantId')) { _%>
            tenantId: passport.value!.tenantId!,
  <%_ } _%>
          };
  <%_
    if (
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .some(({ extra }) => /^(file|image)$/.test(extra.inputRender))
    ) {
  _%>
          const params = getModelFilesUpdate({
            modelPatch,
            fields: [
    <%_
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .filter(({ extra }) => /^(file|image)$/.test(extra.inputRender))
        .forEach(({ name }) => {
    _%>
              '<%- name %>',
    <%_ }) _%>
            ],
          });
          await create<%- schema.extra.Name %>(modelValue, params as any);
  <%_ } else { _%>
          await create<%- schema.extra.Name %>(modelValue);
  <%_ } _%>
          Message.success('新增<%- schema.description %>成功');
          <%- schema.extra.name %>Request.load();
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.copy) { _%>

// 复制<%- schema.description %>
const showCopy<%- schema.extra.Name %>Handle = (<%- schema.extra.name %>: OptimizeModel<<%- schema.name %>>) => {
  const formRef = ref<InstanceType<typeof <%- functions.copy.component %>>>();
  Modal.open({
    title: `复制<%- schema.description %>：${<%- schema.extra.name %>.<%- entity.titleField %>}`,
    content: () => (
      <<%- functions.copy.component %> ref={instance => formRef.value = instance as any} patch={<%- schema.extra.name %>} />
    ),
    width: <%-
      Math.min(
        4,
        Math.ceil(
          schema.properties
            .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
            .length / 5
        )
      ) * (278 + 16) - 16 + 20 * 2
    %>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatch = await formRef.value!.validate();
        try {
          const modelValue = {
            ...modelPatch,
  <%_ if (schema.properties.some(({ name }) => name === 'tenantId')) { _%>
            tenantId: passport.value!.tenantId!,
  <%_ } _%>
          };
  <%_
    if (
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .some(({ extra }) => /^(file|image)$/.test(extra.inputRender))
    ) {
  _%>
          const params = getModelFilesUpdate({
            modelPatch,
            fields: [
    <%_
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .filter(({ extra }) => /^(file|image)$/.test(extra.inputRender))
        .forEach(({ name }) => {
    _%>
              '<%- name %>',
    <%_ }) _%>
            ],
          });
          await create<%- schema.extra.Name %>(modelValue, params as any);
  <%_ } else { _%>
          await create<%- schema.extra.Name %>(modelValue);
  <%_ } _%>
          Message.success('复制<%- schema.description %>成功');
          <%- schema.extra.name %>Request.load();
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.update) { _%>

// 编辑<%- schema.description %>
const showUpdate<%- schema.extra.Name %>Handle = (<%- schema.extra.name %>: OptimizeModel<<%- schema.name %>>) => {
  const formRef = ref<InstanceType<typeof <%- functions.update.component %>>>();
  Modal.open({
    title: `编辑<%- schema.description %>：${<%- schema.extra.name %>.<%- entity.titleField %>}`,
    content: () => (
      <<%- functions.update.component %> ref={instance => formRef.value = instance as any} patch={<%- schema.extra.name %>} />
    ),
    width: <%-
      Math.min(
        4,
        Math.ceil(
          schema.properties
            .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
            .length / 5
        )
      ) * (278 + 16) - 16 + 20 * 2
    %>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatch = await formRef.value!.validate();
        try {
          const modelValue = {
            ...modelPatch,
          };
          const modelUpdate = getEntityUpdate(modelValue, <%- schema.extra.name %>);
          if (modelUpdate) {
  <%_
    if (
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .some(({ extra }) => /^(file|image)$/.test(extra.inputRender))
    ) {
  _%>
            const params = getModelFilesUpdate({
              modelPatch,
              modelValue: <%- schema.extra.name %>,
              fields: [
    <%_
      schema.properties
        .filter(({ name }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name))
        .filter(({ extra }) => /^(file|image)$/.test(extra.inputRender))
        .forEach(({ name }) => {
    _%>
                '<%- name %>',
    <%_ }) _%>
              ],
            });
            await partialUpdate<%- schema.extra.Name %>(modelUpdate, params as any);
  <%_ } else { _%>
            await partialUpdate<%- schema.extra.Name %>(modelUpdate);
  <%_ } _%>
            Message.success('更新<%- schema.description %>成功');
            <%- schema.extra.name %>Request.load();
          }
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.delete) { _%>

// 删除<%- schema.description %>
const showDelete<%- schema.extra.Name %>Handle = (<%- schema.extra.name %>: OptimizeModel<<%- schema.name %>>) => {
  Modal.confirm({
    title: '操作确认',
    content: `是否确定删除<%- schema.description %> “${<%- schema.extra.name %>.<%- entity.titleField %>}”？`,
    okButtonProps: {
      type: 'secondary',
      status: 'danger',
    },
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        await delete<%- schema.extra.Name %>(<%- schema.extra.name %>.id);
        Message.success('删除<%- schema.description %>成功');
        <%- schema.extra.name %>Request.load();
        return true;
      } catch (error) {
        Message.error(getErrorMessage(error));
        return false;
      }
    },
  });
};
<%_ } _%>

// 选择<%- schema.description %>
const <%- schema.extra.name %>SelectedKeys = ref<number[]>([]);
watch(
  () => <%- schema.extra.name %>Request.data,
  () => {
    <%- schema.extra.name %>SelectedKeys.value = [];
  },
);
const selected<%- schema.extra.Names %> = computed(() => (
  <%- schema.extra.name %>Request.data
    ?.filter(({ id }) => <%- schema.extra.name %>SelectedKeys.value.includes(id))
    .map(({ $raw }) => $raw) ?? []
));
<%_ if (functions.batchCreate) { _%>

// 批量新增<%- schema.description %>
const showBatchCreate<%- schema.extra.Name %>Handle = () => {
  const formRef = ref<InstanceType<typeof <%- functions.batchCreate.component %>>>();
  Modal.open({
    title: '批量新增<%- schema.description %>',
    content: () => (
      <<%- functions.batchCreate.component %> ref={instance => formRef.value = instance as any} dynamicRow={true} />
    ),
    width: <%-
      Math.min(
        1200,
        schema.properties
          .filter(({ name, extra }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name) && !/^(image|file)$/.test(extra.inputRender))
          .reduce((totalWidth, { format, extra }) => totalWidth + (typeof extra.width === 'number' ? extra.width : format === 'date-time' ? 180 : 200) + 23 * 2 + 16 * 2, 0) + (28 + 4 * 2 + 16 * 2 + 4) + (20 * 2)
      )
    %>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatchs = await formRef.value!.validate();
        try {
          const modelValues = modelPatchs.map(patch => {
            return {
              ...patch,
  <%_ if (schema.properties.some(({ name }) => name === 'tenantId')) { _%>
              tenantId: passport.value!.tenantId!,
  <%_ } _%>
            };
          });
          await batchCreate<%- schema.extra.Names %>(modelValues);
          Message.success('批量新增<%- schema.description %>成功');
          <%- schema.extra.name %>Request.load();
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.batchCopy) { _%>

// 批量复制<%- schema.description %>
const batchCopy<%- schema.extra.Name %>Hint = computed(() => {
  return !selected<%- schema.extra.Names %>.value.length
    ? '请选择<%- schema.description %>'
    : '';
});
const batchCopy<%- schema.extra.Name %>Disabled = computed(() => !!batchCopy<%- schema.extra.Name %>Hint.value);
const showBatchCopy<%- schema.extra.Name %>Handle = () => {
  const formRef = ref<InstanceType<typeof <%- functions.batchCopy.component %>>>();
  Modal.open({
    title: '批量复制<%- schema.description %>',
    content: () => (
      <<%- functions.batchCopy.component %> ref={instance => formRef.value = instance as any} patchs={selected<%- schema.extra.Names %>.value} />
    ),
    width: <%-
      Math.min(
        1200,
        schema.properties
          .filter(({ name, extra }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name) && !/^(image|file)$/.test(extra.inputRender))
          .reduce((totalWidth, { format, extra }) => totalWidth + (typeof extra.width === 'number' ? extra.width : format === 'date-time' ? 180 : 200) + 23 * 2 + 16 * 2, 0) + (28 + 4 * 2 + 16 * 2 + 4) + (20 * 2)
      )
    %>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatchs = await formRef.value!.validate();
        try {
          const modelValues = modelPatchs.map(patch => {
            return {
              ...patch,
  <%_ if (schema.properties.some(({ name }) => name === 'tenantId')) { _%>
              tenantId: passport.value!.tenantId!,
  <%_ } _%>
            };
          });
          await batchCreate<%- schema.extra.Names %>(modelValues);
          Message.success('批量复制<%- schema.description %>成功');
          <%- schema.extra.name %>Request.load();
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.batchUpdate) { _%>

// 批量编辑<%- schema.description %>
const batchUpdate<%- schema.extra.Name %>Hint = computed(() => {
  return !selected<%- schema.extra.Names %>.value.length
    ? '请选择<%- schema.description %>'
    : '';
});
const batchUpdate<%- schema.extra.Name %>Disabled = computed(() => !!batchUpdate<%- schema.extra.Name %>Hint.value);
const showBatchUpdate<%- schema.extra.Name %>Handle = () => {
  const formRef = ref<InstanceType<typeof <%- functions.batchUpdate.component %>>>();
  Modal.open({
    title: '批量编辑<%- schema.description %>',
    content: () => (
      <<%- functions.batchUpdate.component %> ref={instance => formRef.value = instance as any} patchs={selected<%- schema.extra.Names %>.value} />
    ),
    width: <%-
      Math.min(
        1200,
        schema.properties
          .filter(({ name, extra }) => !/^(id|entityUuid|.+Id|createdBy|createdTime|lastModifiedBy|lastModifiedTime)$/.test(name) && !/^(image|file)$/.test(extra.inputRender))
          .reduce((totalWidth, { format, extra }) => totalWidth + (typeof extra.width === 'number' ? extra.width : format === 'date-time' ? 180 : 200) + 23 * 2 + 16 * 2, 0) + (20 * 2)
      )
    %>,
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const modelPatchs = await formRef.value!.validate();
        try {
          const modelUpdates = modelPatchs
            .map((patch, index) => {
              const update = getEntityUpdate(patch, selected<%- schema.extra.Names %>.value[index]);
              if (update) {
                return {
                  ...update,
                };
              }
            })
            .filter(update => update);
          if (modelUpdates.length > 0) {
            await batchPartialUpdate<%- schema.extra.Names %>(modelUpdates);
            Message.success('批量更新<%- schema.description %>成功');
            <%- schema.extra.name %>Request.load();
          }
          return true;
        } catch (error) {
          Message.error(getErrorMessage(error));
          return false;
        }
      } catch (error) {
        return false;
      }
    },
  });
};
<%_ } _%>
<%_ if (functions.batchDelete) { _%>

// 批量删除<%- schema.description %>
const batchDelete<%- schema.extra.Name %>Hint = computed(() => {
  return !selected<%- schema.extra.Names %>.value.length
    ? '请选择<%- schema.description %>'
    : '';
});
const batchDelete<%- schema.extra.Name %>Disabled = computed(() => !!batchDelete<%- schema.extra.Name %>Hint.value);
const showBatchDelete<%- schema.extra.Name %>Handle = () => {
  Modal.confirm({
    title: '操作确认',
    content: '是否确定批量删除<%- schema.description %>',
    okButtonProps: {
      type: 'secondary',
      status: 'danger',
    },
    maskClosable: false,
    onBeforeOk: async () => {
      try {
        const params = {
          ids: <%- schema.extra.name %>SelectedKeys.value as any,
        };
        await batchDelete<%- schema.extra.Names %>(params);
        Message.success('批量删除<%- schema.description %>成功');
        <%- schema.extra.name %>Request.load();
        return true;
      } catch (error) {
        Message.error(getErrorMessage(error));
        return false;
      }
    },
  });
};
<%_ } _%>
</script>

<style lang="less" scoped>
.full-screen {
  display: flex;
  flex-direction: column;

  &:not(.full-screen-active) {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
}

.@{prefix}-card {
  display: flex;
  flex-direction: column;
  max-height: 100%;

  :deep(.@{prefix}-card-body) {
    flex: 1;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
  }
<%_
  new Set(
    schema.properties
      .filter(({ extra }) => extra.filter === true || extra.filter === 'inMore')
      .filter(({ extra }) => extra.filterRender === 'select' || (!extra.filterRender && (extra.options || extra.optionsFromDict)))
      .map(({ description }) => description.length).sort((a, b) => a - b)
  )
    .forEach(wordLength => {
_%>

  :deep(.query-<%- wordLength %>-words .@{prefix}-select-view-input) {
    width: <%- wordLength * 14 %>px;
  }
<%_ }) _%>
}

.filters-input {
  height: 40px;
  overflow: hidden;
}

.filters-input-active {
  height: auto;
}

.actions {
  width: 100%;
}

.table {
  width: 100%;
  flex: 1;
  overflow: hidden;
}
</style>